{"version":3,"file":"static/js/178.187a26d9.chunk.js","mappings":"mUA0GMA,GAAkBC,EAAAA,EAAAA,IAAoB,CAC1CC,iBAAkBC,EAAAA,GAClBC,YAAaC,EAAAA,KAGTC,EAAqB,CACzBC,yBAAAA,EAAAA,GACAC,eAAAA,EAAAA,GACAC,0BAAAA,EAAAA,IChHF,GDmHeC,EAAAA,EAAAA,IAAQV,EAAiBM,EAAxC,EApGqB,SAACK,GACpB,IACEC,EAEED,EAFFC,SACAR,EACEO,EADFP,YAEF,GAAoCS,EAAAA,EAAAA,UAAS,CAAC,GAA9C,eACA,GADA,WACwDC,EAAAA,EAAAA,GAAkBC,EAAAA,IAAlEC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,aACvC,GAAsCL,EAAAA,EAAAA,UAAS,CAACM,YAAaH,GAAgBA,EAAaI,mBAA1F,eAAOC,EAAP,KACA,GADA,MAC4CR,EAAAA,EAAAA,UAAS,CAACS,UAAWL,GAAmBA,EAAgBM,mBAApG,eAAOC,EAAP,KACMC,GADN,KACarB,EAAcA,EAAYsB,UAAY,IAC7CC,EAAcN,EAAYF,UAAYJ,EAAAA,EAAAA,uBAA0CA,EAAAA,EAAAA,sBAChFa,EAAiBJ,EAAeF,QAAUP,EAAAA,EAAAA,gBAAmC,GAEnFc,EAAAA,EAAAA,YAAU,WACRC,SAASC,KAAKC,UAAUC,SAAS,kBAAoBH,SAASC,KAAKC,UAAUE,OAAO,gBACrF,GAAE,IA6CH,OACE,iBAAKC,UAAU,oCAAf,WACE,kBAAMA,UAAU,8EAA8EC,MAAO,CAACC,MAAM,eAAD,OAAiBV,EAAjB,cAAkCC,IAA7I,WACE,iBAAKO,UAAU,WAAf,WACE,gBAAIA,UAAU,iFAAd,qBACWV,MAEX,mBAAQU,UAAU,oCAAlB,kDAIDjB,GApCe,WACpB,IAAMoB,EAnBc,SAAAC,GACpB,IAAMC,EAAiB,GAcvB,OAbAD,GAAiBA,EAAcE,SAAQ,SAAAC,GACrC,IAAMC,EAASD,EAAOC,QAAUD,EAAOC,OAAOC,MAAM,KACpD,GAAID,EAAQ,CACV,IAAME,GAAOF,EAAO,GACdG,GAAOH,EAAO,GACdI,EAAOJ,EAAO,GACfH,EAAeK,KAClBL,EAAeK,GAAO,IAExBL,EAAeK,GAAKC,GAAOJ,EAC3BA,EAAOM,SAAW,OAASD,CAC5B,CACF,IACMP,CACR,CAGwBS,CAAc/B,GACrC,OAAOoB,GAAkBA,EAAeY,KAAI,SAACL,EAAKM,GAChD,OAAO,gBAAgChB,UAAU,WAAWC,MAAO,CAACgB,SAAmB,IAATD,EAAaA,EAAO,GAA3F,SACJN,EAAIK,KAAI,SAACR,EAAQW,GAChB,IAAQC,EAA2DZ,EAA3DY,OAAQC,EAAmDb,EAAnDa,UAAWC,EAAwCd,EAAxCc,KAAMC,EAAkCf,EAAlCe,YAAgBC,GAAjD,OAAmEhB,EAAnE,GACMiB,EAAYC,EAAWL,GACvBM,EAAOD,EAAWJ,GACxB,OAAO,gBAA6CrB,UAAWO,EAAOM,SAA/D,UACL,SAACa,EAAD,CACEC,QAASL,EAETH,OAAQA,EACR1C,SAAUA,EACVmD,SAAS,SAACJ,EAAD,CAAWK,KAAMN,EAAeO,KAAM7D,EAAaQ,SAAUA,KAHjE,oBAAsBuC,EAAO,IAAME,IAH3B,cAAgBF,EAAO,IAAME,EAS/C,KAdc,cAAgBF,EAgBlC,GAIF,CAasBe,MAElBjD,IAAmB,SAAC,EAAAkD,UAAD,CAAWzB,OAAQzB,MAG5C,G","sources":["app/pages/DashboardNew/DashboardNew.jsx","app/pages/DashboardNew/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createPropsSelector } from \"reselect-immutable-helpers\";\nimport usePageComponents from \"../../hooks/usePageComponents\";\nimport { getPresentComponentsConfig } from \"../ComponentCreator/selectors\";\nimport { getUserDetails } from \"../../global-selectors\";\nimport { dispatchLevels } from \"../../global-actions\";\nimport {\n  dispatchComponentsConfig,\n  dispatchSelectedComponent,\n} from \"../ComponentCreator/actions\";\nimport { SidePanel } from \"../../components\";\nimport * as components from \"../../components\";\nimport DASHBOARD_CONFIG from \"../../config/dashboardNewConfig\";\nimport \"./DashboardNew.module.scss\";\n\nconst DashboardNew = (props) => {\n  const {\n    navigate,\n    userDetails,\n  } = props;\n  const [hoverState, setHoverState] = useState({});\n  const { DrawerConfig, SidePanelConfig, WidgetConfig } = usePageComponents(DASHBOARD_CONFIG);\n  const [drawerState, setDrawerState] = useState({collapsed: !(DrawerConfig && DrawerConfig.initialExpanded)});\n  const [sidePanelState, setSidePanelState] = useState({visible: !(SidePanelConfig && SidePanelConfig.initialVisible)});\n  const name = userDetails ? userDetails.firstname : \"\";\n  const drawerWidth = drawerState.collapsed ? DASHBOARD_CONFIG.DRAWER_WIDTH_COLLAPSED : DASHBOARD_CONFIG.DRAWER_WIDTH_EXPANDED;\n  const sidePanelWidth = sidePanelState.visible ? DASHBOARD_CONFIG.SIDEPANEL_WIDTH : 0;\n\n  useEffect(() => {\n    document.body.classList.contains(\"body-modifier\") && document.body.classList.remove(\"body-modifier\");\n  }, []);\n\n  const layoutWidgets = widgetConfigs => {\n    const laidoutConfigs = [];\n    widgetConfigs && widgetConfigs.forEach(config => {\n      const layout = config.layout && config.layout.split(\".\");\n      if (layout) {\n        const row = +layout[0];\n        const col = +layout[1];\n        const span = layout[2];\n        if (!laidoutConfigs[row]) {\n          laidoutConfigs[row] = [];\n        }\n        laidoutConfigs[row][col] = config;\n        config.colClass = \"col-\" + span;\n      }\n    })\n    return laidoutConfigs;\n  }\n\n  const renderWidgets = () => {\n    const laidOutConfigs = layoutWidgets(WidgetConfig);\n    return laidOutConfigs && laidOutConfigs.map((row, rowI) => {\n      return <div key={\"widget-row-\" + rowI} className=\"row mb-3\" style={{flexGrow: rowI === 1 ? rowI : 8}}>\n        {row.map((config, colI) => {\n          const { header, component, type, typeClasses, ...contentConfig } = config;\n          const Component = components[component];\n          const Type = components[type];\n          return <div key={\"widget-col-\" + rowI + \"-\" + colI} className={config.colClass}>\n            <Type\n              classes={typeClasses}\n              key={\"dashboard-widget-\" + rowI + \"-\" + colI}\n              header={header}\n              navigate={navigate}\n              content={<Component data={contentConfig} user={userDetails} navigate={navigate} />}\n            />\n          </div>\n        })}\n      </div>\n    })\n    WidgetConfig.map((config, i) => {\n      \n      })\n  }\n\n  return (\n    <div className=\"c-DashboardNew d-flex flex-grow-1\">\n      <main className=\"c-Dashboard__main overflow-auto d-flex flex-column flex-grow-1 bg-white p-3\" style={{width: `calc(100% - ${drawerWidth} - ${sidePanelWidth}`}}>\n        <div className=\"row mb-3\">\n          <h3 className=\"c-Dashboard__main__header c-Dashboard__main-default-font-color text-start mb-0\">\n            Welcome {name}\n          </h3>\n          <strong className=\"c-Dashboard__secondary-font-color\">\n            Let's get started with your stuff\n          </strong>\n        </div>\n        {WidgetConfig && renderWidgets()}\n      </main>\n      {SidePanelConfig && <SidePanel config={SidePanelConfig} />}\n    </div>\n  );\n};\n\nDashboardNew.propTypes = {};\n\nDashboardNew.propTypes = {\n  componentsConfig: PropTypes.object,\n  dispatchComponentsConfig: PropTypes.func,\n  dispatchLevels: PropTypes.func,\n  dispatchSelectedComponent: PropTypes.func,\n  navigate: PropTypes.func,\n  userDetails: PropTypes.object,\n};\n\nconst mapStateToProps = createPropsSelector({\n  componentsConfig: getPresentComponentsConfig,\n  userDetails: getUserDetails,\n});\n\nconst mapDispatchToProps = {\n  dispatchComponentsConfig,\n  dispatchLevels,\n  dispatchSelectedComponent,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardNew);\n","import DashboardNew from \"./DashboardNew.jsx\";\n\nexport default DashboardNew;"],"names":["mapStateToProps","createPropsSelector","componentsConfig","getPresentComponentsConfig","userDetails","getUserDetails","mapDispatchToProps","dispatchComponentsConfig","dispatchLevels","dispatchSelectedComponent","connect","props","navigate","useState","usePageComponents","DASHBOARD_CONFIG","DrawerConfig","SidePanelConfig","WidgetConfig","collapsed","initialExpanded","drawerState","visible","initialVisible","sidePanelState","name","firstname","drawerWidth","sidePanelWidth","useEffect","document","body","classList","contains","remove","className","style","width","laidOutConfigs","widgetConfigs","laidoutConfigs","forEach","config","layout","split","row","col","span","colClass","layoutWidgets","map","rowI","flexGrow","colI","header","component","type","typeClasses","contentConfig","Component","components","Type","classes","content","data","user","renderWidgets","SidePanel"],"sourceRoot":""}