{"version":3,"file":"static/js/267.e7f508fa.chunk.js","mappings":"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","sources":["app/pages/ComponentImporter/index.js","app/pages/ComponentImporter/ComponentImporter.jsx"],"sourcesContent":["import ComponentImporter from \"./ComponentImporter.jsx\";\n\nexport default ComponentImporter;","import React, { useState, useRef } from \"react\";\nimport { LoadableIcon } from \"../../components\";\nimport JsonView from \"../../utils/JsonUtils/JsonUtil\";\nimport DescriptorGenerator from \"../../utils/CodeUtils/DescriptorGenerator\";\nimport DOMHelper from \"../../utils/DOMHelper\";\nimport \"./ComponentImporter.module.scss\";\n\nconst ComponentImporter = props => {\n  const [codeString, setCodeString] = useState(\"\");\n  const [jsonState, setJsonState] = useState({jsonString: \"\", jsonObj: null, jsonView: \"object\"});\n  const [inputHovered, setInputHovered] = useState(false);\n  const [outputHovered, setOutputHovered] = useState(false);\n  const outRef = useRef(null);\n\n  const renderDescriptor = () => {\n    const outputNode = outRef && outRef.current;\n    outputNode.innerHTML = \"\";\n    const descriptor = DescriptorGenerator.generate(codeString);\n    const descriptorString = descriptor ? JSON.stringify(descriptor, undefined, 2) : \"Unable to Generate Descriptor, please review provided string\";\n    const tree = JsonView.createTree(descriptorString);\n    console.log(tree)\n    // const armoryFormat = convertToArmoryFormat(tree);\n    // JsonView.render(armoryFormat, outputNode);\n    JsonView.render(tree, outputNode);\n    JsonView.expandChildren(tree);\n    setJsonState({jsonString: descriptorString, jsonObj: tree, jsonView: \"object\"});\n  }\n  \n  const toggleJson = () => {\n    const jsonStateClone = {...jsonState};\n    const outputNode = outRef && outRef.current;\n    outputNode.innerHTML = \"\";\n    jsonStateClone.jsonString = JSON.stringify(JSON.parse(jsonStateClone.jsonString), undefined, 2);\n    jsonStateClone.jsonView === \"string\" ? JsonView.render(jsonStateClone.jsonObj, outputNode) : outputNode.innerHTML = jsonStateClone.jsonString;\n    jsonStateClone.jsonView === \"string\" && JsonView.expandChildren(jsonStateClone.jsonObj);\n    jsonStateClone.jsonView = jsonStateClone.jsonView === \"object\" ? \"string\" : \"object\";\n    setJsonState(jsonStateClone);\n  }\n\n  const copyToClipboard = (string) => {\n    navigator.clipboard.writeText(string).then(function() {\n      console.log(\"Async: Copying to clipboard was successful!\");\n    }, function(err) {\n      console.error(\"Async: Could not copy text: \", err);\n    });\n  }\n\n  return (\n    // <IconContext.Provider value={{ color: \"white\", size: \"1.1rem\", className: \"global-class-name\" }}>\n      <div className=\"c-ComponentImporter px-3 overflow-auto flex-grow-1 d-flex flex-column\">\n        <div className=\"converter-tools row pt-2\">\n          <div className=\"col-12\">\n            <button className=\"btn btn-success me-3\" onClick={renderDescriptor}><LoadableIcon icon=\"Vsc.VscDebugStart\" />Run</button>\n            <button className=\"btn btn-danger\" onClick={() => {\n              setCodeString(\"\");\n              setJsonState({jsonString: \"\", jsonObj: null, jsonView: \"object\"});\n              outRef && outRef.current && (outRef.current.innerHTML = \"\")\n            }}>Clear</button>\n          </div>\n        </div>\n        <div className=\"row flex-grow-1 mb-3 pt-2 pb-3\">\n          <div className={`col-6 pe-2 position-relative${inputHovered ? \" hovered\" : \"\"}`} onMouseEnter={() => setInputHovered(true)} onMouseLeave={() => setInputHovered(false)}>\n            <div className=\"code-importer-input-tools position-absolute\">\n              {/* <IconContext.Provider value={{ color: \"black\", size: \"0.8rem\", className: \"code-importer-input-tool\" }}> */}\n                <LoadableIcon icon=\"Vsc.VscDebugStart\" onClick={renderDescriptor} />\n                <LoadableIcon icon=\"Bs.BsCodeSlash\" onClick={() => setCodeString(DOMHelper.process(codeString))} />\n                <LoadableIcon icon=\"Ai.AiOutlineClear\" onClick={() => setCodeString(\"\")} />\n                <LoadableIcon icon=\"Fa.FaRegCopy\" onClick={() => copyToClipboard(codeString)} />\n            </div>\n            <textarea id=\"code-importer-input\" className=\"c-ComponentImporter__code-input w-100 h-100\" value={codeString} onChange={(e) => setCodeString(e.target.value)} name=\"code-importer-input\" rows=\"20\" />\n          </div>\n          <div className={`col-6 ps-2 position-relative${outputHovered ? \" hovered\" : \"\"}`}  onMouseEnter={() => setOutputHovered(true)} onMouseLeave={() => setOutputHovered(false)}>\n            <div className=\"code-importer-output-tools position-absolute\">\n              {/* <IconContext.Provider value={{ color: \"black\", size: \"0.8rem\", className: \"code-importer-output-tool\" }}> */}\n                <LoadableIcon icon=\"Ri.RiExchangeLine\" onClick={toggleJson} />\n                <LoadableIcon icon=\"Ai.AiOutlineClear\" onClick={() => {\n                  setJsonState({jsonString: \"\", jsonObj: null, jsonView: \"object\"});\n                  outRef && outRef.current && (outRef.current.innerHTML = \"\");\n                }} />\n                <LoadableIcon icon=\"Fa.FaRegCopy\" onClick={() => copyToClipboard(jsonState.jsonString)} />\n                {jsonState.jsonView === \"object\" && <LoadableIcon icon=\"Vsc.VscExpandAll\" onClick={() => JsonView.expandChildren(jsonState.jsonObj)} />}\n                {jsonState.jsonView === \"object\" && <LoadableIcon icon=\"Vsc.VscCollapseAll\" onClick={() => JsonView.collapseChildren(jsonState.jsonObj)} />}\n            </div>\n            <pre id=\"code-importer-output\" className=\"c-ComponentImporter__code-output w-100 h-100 bg-white\" ref={outRef} />\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default ComponentImporter;"],"names":["props","useState","codeString","setCodeString","jsonString","jsonObj","jsonView","jsonState","setJsonState","inputHovered","setInputHovered","outputHovered","setOutputHovered","outRef","useRef","renderDescriptor","outputNode","current","innerHTML","descriptor","DescriptorGenerator","descriptorString","JSON","stringify","undefined","tree","JsonView","console","log","copyToClipboard","string","navigator","clipboard","writeText","then","err","error","className","onClick","LoadableIcon","icon","onMouseEnter","onMouseLeave","DOMHelper","id","value","onChange","e","target","name","rows","jsonStateClone","parse","ref"],"sourceRoot":""}